package service;

import connect.DBConnection;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import com.google.gson.Gson;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.text.NumberFormat;
import java.util.Locale;

public class ChatService {

    private static final String API_URL = "http://localhost:11434/api/generate";
    private static final String MODEL_NAME = "llama3";

    private final List<ChatMessage> conversationHistory = new ArrayList<>();
    private final Gson gson = new Gson();
    private final DBConnection dbConnection;

    public ChatService() {
        this.dbConnection = new DBConnection();
    }

    public boolean isOllamaAvailable() {
        HttpURLConnection connection = null;
        try {
            URL statusUrl = new URL("http://localhost:11434");
            connection = (HttpURLConnection) statusUrl.openConnection();
            connection.setRequestMethod("HEAD");
            connection.setConnectTimeout(3000);
            connection.setReadTimeout(3000);
            return (connection.getResponseCode() == HttpURLConnection.HTTP_OK);
        } catch (Exception e) {
            return false;
        } finally {
            if (connection != null) {
                connection.disconnect();
            }
        }
    }

    public String generateResponse(String userMessage) {
        try {
            if (!isOllamaAvailable()) {
                return "‚ö†Ô∏è D·ªãch v·ª• AI hi·ªán kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng ki·ªÉm tra Ollama!";
            }

            // X·ª≠ l√Ω truy v·∫•n database
            String dbResponse = handleDatabaseQuery(userMessage);
            if (dbResponse != null) {
                conversationHistory.add(new ChatMessage("user", userMessage));
                conversationHistory.add(new ChatMessage("model", dbResponse));
                return dbResponse;
            }

            // X·ª≠ l√Ω b·∫±ng AI
            conversationHistory.add(new ChatMessage("user", userMessage));
            if (conversationHistory.size() > 5) {
                conversationHistory.subList(0, conversationHistory.size() - 5).clear();
            }

            String systemPrompt = buildSystemPrompt();
            StringBuilder promptBuilder = new StringBuilder();
            promptBuilder.append(systemPrompt);
            for (ChatMessage msg : conversationHistory) {
                String prefix = msg.role.equals("user") ? "User: " : "Assistant: ";
                promptBuilder.append(prefix).append(msg.text).append("\n");
            }
            promptBuilder.append("Assistant: ");

            return callOllamaAPI(promptBuilder.toString());
        } catch (Exception e) {
            e.printStackTrace();
            return "üòµ Xin l·ªói, c√≥ l·ªói x·∫£y ra khi g·ªçi AI. Vui l√≤ng th·ª≠ l·∫°i!";
        }
    }

    private String buildSystemPrompt() {
        return "B·∫°n l√† tr·ª£ l√Ω AI cho h·ªá th·ªëng qu·∫£n l√Ω RamBap76. D∆∞·ªõi ƒë√¢y l√† c·∫•u tr√∫c c∆° s·ªü d·ªØ li·ªáu v√† c√°c ch·ª©c nƒÉng ch√≠nh:\n"
                + "\n"
                + "### C·∫§U TR√öC C∆† S·ªû D·ªÆ LI·ªÜU:\n"
                + "1. B·∫£ng orders (ƒë∆°n h√†ng):\n"
                + "   - Tr·∫°ng th√°i: NEW, DELIVERING, DELIVERED, CANCELLED, URGENT, APPOINTMENT\n"
                + "   - Th√¥ng tin: order_date, appointment_time, priority_delivery_date\n"
                + "\n"
                + "2. B·∫£ng deliveries (giao h√†ng):\n"
                + "   - Tr·∫°ng th√°i: ASSIGNED, IN_TRANSIT, COMPLETED, CANCELLED\n"
                + "   - Th√¥ng tin: delivery_fee, box_fee, collected_amount\n"
                + "\n"
                + "3. B·∫£ng shippers (shipper):\n"
                + "   - Th√¥ng tin: area, priority_level, daily_income\n"
                + "   - Li√™n k·∫øt v·ªõi users qua user_id\n"
                + "\n"
                + "4. B·∫£ng shipper_debts (c√¥ng n·ª£):\n"
                + "   - Th√¥ng tin: date, amount, payment_date\n"
                + "   - Xem c√¥ng n·ª£ qu√° h·∫°n qua view V_ShipperDebt_Overdue\n"
                + "\n"
                + "5. B·∫£ng customers (kh√°ch h√†ng):\n"
                + "   - Th√¥ng tin: name, phone, address, notes\n"
                + "   - V·ªã tr√≠: latitude, longitude\n"
                + "\n"
                + "6. B·∫£ng products (s·∫£n ph·∫©m):\n"
                + "   - Lo·∫°i: RAM M·∫∂N, RAM CHAY, RAM ƒê·∫∂C BI·ªÜT\n"
                + "   - T·ªìn kho: stock\n"
                + "\n"
                + "### C√ÅC CH·ª®C NƒÇNG CH√çNH:\n"
                + "1. Tr·∫°ng th√°i ƒë∆°n h√†ng:\n"
                + "   - Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng (NEW, DELIVERING,...)\n"
                + "   - Xem l·ªãch s·ª≠ giao h√†ng\n"
                + "\n"
                + "2. Th√¥ng tin shipper:\n"
                + "   - Khu v·ª±c ho·∫°t ƒë·ªông (area)\n"
                + "   - M·ª©c ƒë·ªô ∆∞u ti√™n (priority_level)\n"
                + "   - Thu nh·∫≠p h√†ng ng√†y (daily_income)\n"
                + "\n"
                + "3. C√¥ng n·ª£:\n"
                + "   - Xem c√¥ng n·ª£ hi·ªán t·∫°i\n"
                + "   - Ki·ªÉm tra c√¥ng n·ª£ qu√° h·∫°n\n"
                + "   - L·ªãch s·ª≠ thanh to√°n\n"
                + "\n"
                + "4. V·ªã tr√≠ giao h√†ng:\n"
                + "   - ƒê·ªãa ch·ªâ kh√°ch h√†ng\n"
                + "   - T·ªça ƒë·ªô (latitude, longitude)\n"
                + "   - T·ª± ƒë·ªông ph√¢n shipper theo khu v·ª±c\n"
                + "\n"
                + "### Y√äU C·∫¶U TR·∫¢ L·ªúI:\n"
                + "- Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, r√µ r√†ng\n"
                + "- T·∫≠p trung v√†o 4 ch·ªß ƒë·ªÅ ch√≠nh: Tr·∫°ng th√°i ƒë∆°n h√†ng, Th√¥ng tin shipper, C√¥ng n·ª£, V·ªã tr√≠ giao h√†ng\n"
                + "- S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u khi c·∫ßn thi·∫øt\n"
                + "- Gi·∫£i th√≠ch ƒë∆°n gi·∫£n c√°c kh√°i ni·ªám li√™n quan\n"
                + "\n"
                + "### V√ç D·ª§:\n"
                + "User: Tr·∫°ng th√°i ƒë∆°n h√†ng s·ªë 5\n"
                + "Assistant: ƒê∆°n h√†ng s·ªë 5 hi·ªán ƒëang ·ªü tr·∫°ng th√°i 'DELIVERING'. Shipper ƒëang tr√™n ƒë∆∞·ªùng giao h√†ng.\n"
                + "\n"
                + "User: Th√¥ng tin shipper c·ªßa ƒë∆°n h√†ng 10\n"
                + "Assistant: Shipper ph·ª• tr√°ch ƒë∆°n h√†ng 10 l√† Nguy·ªÖn VƒÉn A. Khu v·ª±c: Qu·∫≠n S∆°n Tr√†, M·ª©c ∆∞u ti√™n: 1.\n"
                + "\n"
                + "User: C√¥ng n·ª£ shipper 15\n"
                + "Assistant: Shipper 15 hi·ªán c√≥ t·ªïng c√¥ng n·ª£ 1,500,000 VND. C√¥ng n·ª£ qu√° h·∫°n: 500,000 VND (t·ª´ ng√†y 2023-10-01).\n"
                + "\n"
                + "User: V·ªã tr√≠ giao h√†ng ƒë∆°n h√†ng 20\n"
                + "Assistant: ƒê∆°n h√†ng 20 s·∫Ω giao ƒë·∫øn: 123 L√™ Du·∫©n, ƒê√† N·∫µng. T·ªça ƒë·ªô: 16.0614, 108.2145.\n"
                + "\n"
                + "H√£y tr·∫£ l·ªùi c√¢u h·ªèi ti·∫øp theo c·ªßa ng∆∞·ªùi d√πng d·ª±a tr√™n th√¥ng tin tr√™n:";
    }

    private String callOllamaAPI(String fullPrompt) throws Exception {
        JsonObject requestJson = new JsonObject();
        requestJson.addProperty("model", MODEL_NAME);
        requestJson.addProperty("prompt", fullPrompt);
        requestJson.addProperty("stream", false);
        requestJson.addProperty("temperature", 0.7);

        String requestBody = gson.toJson(requestJson);
        System.out.println("Ollama Request JSON:\n" + requestBody);

        URL url = new URL(API_URL);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("POST");
        connection.setRequestProperty("Content-Type", "application/json");
        connection.setDoOutput(true);
        connection.setConnectTimeout(5000);
        connection.setReadTimeout(30000);

        try (OutputStream os = connection.getOutputStream()) {
            os.write(requestBody.getBytes(StandardCharsets.UTF_8));
        }

        if (connection.getResponseCode() == HttpURLConnection.HTTP_OK) {
            try (BufferedReader br = new BufferedReader(
                    new InputStreamReader(connection.getInputStream(), StandardCharsets.UTF_8))) {

                StringBuilder response = new StringBuilder();
                String line;
                while ((line = br.readLine()) != null) {
                    response.append(line);
                }

                String aiResponse = extractTextFromResponse(response.toString());
                conversationHistory.add(new ChatMessage("model", aiResponse));
                return aiResponse;
            }
        } else {
            System.err.println("Ollama error code: " + connection.getResponseCode());
            return "üö´ AI kh√¥ng ph·∫£n h·ªìi. Vui l√≤ng th·ª≠ l·∫°i sau.";
        }
    }

    private String handleDatabaseQuery(String userMessage) {
        Matcher m;

        // 1. Truy v·∫•n tr·∫°ng th√°i ƒë∆°n h√†ng
        m = Pattern.compile("(?i)(ƒë∆°n h√†ng|tr·∫°ng th√°i).*s·ªë\\s*(\\d+)").matcher(userMessage);
        if (m.find()) {
            int orderId = Integer.parseInt(m.group(2));
            return getOrderStatus(orderId);
        }

        // 2. Truy v·∫•n th√¥ng tin shipper
        m = Pattern.compile("(?i)(shipper|t√†i x·∫ø).*?\\b(\\d+)\\b").matcher(userMessage);
        if (m.find()) {
            int shipperId = Integer.parseInt(m.group(2));
            return getShipperInfo(shipperId);
        }

        // 3. Truy v·∫•n c√¥ng n·ª£
        m = Pattern.compile("(?i)(c√¥ng n·ª£|n·ª£).*(shipper|t√†i x·∫ø).*s·ªë\\s*(\\d+)").matcher(userMessage);
        if (m.find()) {
            int shipperId = Integer.parseInt(m.group(3));
            return getShipperDebt(shipperId);
        }

        // 4. Truy v·∫•n v·ªã tr√≠ giao h√†ng
        m = Pattern.compile("(?i)(v·ªã tr√≠|ƒë·ªãa ch·ªâ|t·ªça ƒë·ªô).*(ƒë∆°n h√†ng|giao h√†ng).*s·ªë\\s*(\\d+)").matcher(userMessage);
        if (m.find()) {
            int orderId = Integer.parseInt(m.group(3));
            return getDeliveryLocation(orderId);
        }

        return null;
    }

    // ========== DATABASE QUERY METHODS ==========
    private String getOrderStatus(int orderId) {
        String sql = "SELECT o.status, o.appointment_time, d.status AS delivery_status "
                + "FROM orders o LEFT JOIN deliveries d ON o.id = d.order_id "
                + "WHERE o.id = ?";

        try (Connection conn = dbConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, orderId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    String orderStatus = rs.getString("status");
                    String deliveryStatus = rs.getString("delivery_status");
                    Timestamp appointment = rs.getTimestamp("appointment_time");

                    return String.format("ƒê∆°n h√†ng %d:\n- Tr·∫°ng th√°i: %s\n- Giao h√†ng: %s\n- L·ªãch h·∫πn: %s",
                            orderId,
                            translateStatus(orderStatus),
                            deliveryStatus != null ? translateDeliveryStatus(deliveryStatus) : "Ch∆∞a giao",
                            formatAppointment(appointment));
                }
                return "‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng " + orderId;
            }
        } catch (SQLException e) {
            return "‚õî L·ªói truy v·∫•n ƒë∆°n h√†ng: " + e.getMessage();
        }
    }

    private String getShipperInfo(int shipperId) {
    // S·ª≠a c√¢u truy v·∫•n: thay s.id b·∫±ng s.user_id
    String sql = "SELECT u.full_name, s.area, s.priority_level, s.daily_income "
            + "FROM shippers s JOIN users u ON s.user_id = u.id "
            + "WHERE s.user_id = ?"; // S·ª≠a t·∫°i ƒë√¢y

    try (Connection conn = dbConnection.getConnection();
         PreparedStatement stmt = conn.prepareStatement(sql)) {
        
        stmt.setInt(1, shipperId);
        try (ResultSet rs = stmt.executeQuery()) {
            if (rs.next()) {
                // S·ª≠ d·ª•ng format ti·ªÅn t·ªá Vi·ªát Nam
                NumberFormat vnFormat = NumberFormat.getNumberInstance(new Locale("vi", "VN"));
                String dailyIncome = vnFormat.format(rs.getDouble("daily_income"));
                
                return String.format("Shipper %d:\n- T√™n: %s\n- Khu v·ª±c: %s\n- M·ª©c ∆∞u ti√™n: %d\n- Thu nh·∫≠p/ng√†y: %s VND",
                        shipperId,
                        rs.getString("full_name"),
                        rs.getString("area"),
                        rs.getInt("priority_level"),
                        dailyIncome);
            }
            return "‚ùå Kh√¥ng t√¨m th·∫•y shipper " + shipperId;
        }
    } catch (SQLException e) {
        return "‚õî L·ªói truy v·∫•n shipper: " + e.getMessage();
    }
}

    private String getShipperDebt(int shipperId) {
          String sql = "SELECT SUM(amount) AS total_debt, "
            + "(SELECT SUM(amount) FROM shipper_debts WHERE shipper_id = ? AND payment_date IS NULL) AS overdue "
            + "FROM shipper_debts WHERE shipper_id = ?";

        try (Connection conn = dbConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, shipperId);
            stmt.setInt(2, shipperId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    double totalDebt = rs.getDouble("total_debt");
                    double overdue = rs.getDouble("overdue");

                    return String.format("C√¥ng n·ª£ shipper %d:\n- T·ªïng n·ª£: %,.0f VND\n- Qu√° h·∫°n: %,.0f VND",
                            shipperId, totalDebt, overdue);
                }
                return "‚ÑπÔ∏è Shipper " + shipperId + " kh√¥ng c√≥ c√¥ng n·ª£";
            }
        } catch (SQLException e) {
            return "‚õî L·ªói truy v·∫•n c√¥ng n·ª£: " + e.getMessage();
        }
    }

    private String getDeliveryLocation(int orderId) {
        String sql = "SELECT c.name, c.address, c.latitude, c.longitude "
                + "FROM orders o JOIN customers c ON o.customer_id = c.id "
                + "WHERE o.id = ?";

        try (Connection conn = dbConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {

            stmt.setInt(1, orderId);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    return String.format("V·ªã tr√≠ giao ƒë∆°n h√†ng %d:\n- Kh√°ch h√†ng: %s\n- ƒê·ªãa ch·ªâ: %s\n- T·ªça ƒë·ªô: %s, %s",
                            orderId,
                            rs.getString("name"),
                            rs.getString("address"),
                            rs.getString("latitude"),
                            rs.getString("longitude"));
                }
                return "‚ùå Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng " + orderId;
            }
        } catch (SQLException e) {
            return "‚õî L·ªói truy v·∫•n v·ªã tr√≠: " + e.getMessage();
        }
    }

    // ========== HELPER METHODS ==========
    private String translateStatus(String status) {
        switch (status) {
            case "NEW":
                return "M·ªöI";
            case "DELIVERING":
                return "ƒêANG GIAO";
            case "DELIVERED":
                return "ƒê√É GIAO";
            case "CANCELLED":
                return "ƒê√É H·ª¶Y";
            case "URGENT":
                return "KH·∫®N C·∫§P";
            case "APPOINTMENT":
                return "H·∫∏N GI·ªú";
            default:
                return status;
        }
    }

    private String translateDeliveryStatus(String status) {
        switch (status) {
            case "ASSIGNED":
                return "ƒê√É PH√ÇN C√îNG";
            case "IN_TRANSIT":
                return "ƒêANG V·∫¨N CHUY·ªÇN";
            case "COMPLETED":
                return "HO√ÄN TH√ÄNH";
            case "CANCELLED":
                return "ƒê√É H·ª¶Y";
            default:
                return status;
        }
    }

    private String formatAppointment(Timestamp ts) {
        return (ts != null) ? new SimpleDateFormat("dd/MM/yyyy HH:mm").format(ts) : "Ch∆∞a ƒë·∫∑t l·ªãch";
    }

    private String extractTextFromResponse(String jsonResponse) {
        try {
            JsonObject jsonObject = JsonParser.parseString(jsonResponse).getAsJsonObject();
            return jsonObject.get("response").getAsString().trim();
        } catch (Exception e) {
            System.out.println("‚ùå JSON parse error: " + e.getMessage());
            return "Kh√¥ng th·ªÉ hi·ªÉu ph·∫£n h·ªìi t·ª´ AI.";
        }
    }

    private static class ChatMessage {

        private final String role;
        private final String text;

        public ChatMessage(String role, String text) {
            this.role = role;
            this.text = text;
        }
    }
}
